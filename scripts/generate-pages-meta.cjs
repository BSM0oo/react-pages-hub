const fs = require('fs');
const path = require('path');

const pagesDir = path.join(__dirname, '..', 'src', 'pages');
const outFile = path.join(__dirname, '..', 'src', 'pages-meta.ts');

/** Recursively walk pages directory and collect file metadata */
function walk(dir, relative = '') {
  const entries = fs.readdirSync(path.join(dir, relative), { withFileTypes: true });
  for (const entry of entries) {
    const relPath = path.join(relative, entry.name);
    const fullPath = path.join(dir, relPath);
    if (entry.isDirectory()) {
      walk(dir, relPath);
    } else if (entry.isFile()) {
      if (/(\.tsx|\.jsx)$/.test(entry.name)) {
        const name = relPath.replace(/\.(tsx|jsx)$/, '');
        const mtime = fs.statSync(fullPath).mtime.toISOString();
        meta[name] = mtime;
      } else if (entry.name.endsWith('.html')) {
        let name = relPath.replace(/\.html$/, '');
        if (name.endsWith('/index')) name = name.slice(0, -6);
        const mtime = fs.statSync(fullPath).mtime.toISOString();
        meta[name] = mtime;
      }
    }
  }
}

const meta = {};
walk(pagesDir);

const content = `// Auto-generated by generate-pages-meta.cjs\nexport default ${JSON.stringify(meta, null, 2)} as Record<string, string>;\n`;
fs.writeFileSync(outFile, content);
console.log(`Generated pages metadata with ${Object.keys(meta).length} entries`);
